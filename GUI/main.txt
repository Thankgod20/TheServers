package main

import (
	"encoding/json"
	"fmt"
	"image"
	"image/color"
	"io/ioutil"
	"log"
	"math"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	holders "github.com/thankgod20/scraperServer/Holders"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

// ------------------ Custom Theme ------------------

type darkBlueTheme struct{}

var currentPoolID string = "9DT4TqC3R9NGcjtcDtevkjimhjKLmZK3V7m5mUZugxxP" // default pool id

var _ fyne.Theme = (*darkBlueTheme)(nil)

func (darkBlueTheme) Color(name fyne.ThemeColorName, variant fyne.ThemeVariant) color.Color {
	switch name {
	case theme.ColorNameBackground:
		// Main background color
		return color.RGBA{R: 27, G: 43, B: 52, A: 255} // #1B2B34
	case theme.ColorNameButton:
		return color.RGBA{R: 52, G: 73, B: 85, A: 255} // #344955
	case theme.ColorNameDisabledButton:
		return color.RGBA{R: 72, G: 84, B: 96, A: 255}
	case theme.ColorNameDisabled:
		return color.RGBA{R: 99, G: 110, B: 114, A: 255}
	case theme.ColorNameForeground:
		return color.RGBA{R: 192, G: 197, B: 206, A: 255} // #C0C5CE
	case theme.ColorNameHover:
		return color.RGBA{R: 44, G: 62, B: 80, A: 255}
	case theme.ColorNameFocus:
		return color.RGBA{R: 86, G: 175, B: 255, A: 255} // highlight color
	case theme.ColorNamePlaceHolder:
		return color.RGBA{R: 142, G: 152, B: 164, A: 255}
	case theme.ColorNameScrollBar:
		return color.RGBA{R: 60, G: 60, B: 67, A: 180}
	case theme.ColorNameShadow:
		return color.RGBA{R: 0, G: 0, B: 0, A: 128}
	}
	return theme.DefaultTheme().Color(name, variant)
}

func (darkBlueTheme) Font(style fyne.TextStyle) fyne.Resource {
	// Use the default font, or load your own custom font resource
	return theme.DefaultTheme().Font(style)
}

func (darkBlueTheme) Icon(n fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(n)
}

func (darkBlueTheme) Size(name fyne.ThemeSizeName) float32 {
	switch name {
	case theme.SizeNamePadding:
		return 4
	case theme.SizeNameScrollBar:
		return 12
	}
	return theme.DefaultTheme().Size(name)
}

// ------------------ Token Management ------------------
type NullTime struct {
	time.Time
}

type Transfer struct {
	Address string   `json:"address"`
	Amount  float64  `json:"amount"`
	Time    NullTime `json:"time"`
}
type Token struct {
	Name        string `json:"name"`
	Address     string `json:"address"`
	MintAddress string `json:"mintaddress"`
	Symbol      string `json:"symbol"`
}

type TokenMetadata struct {
	Name   string `json:"name"`
	Symbol string `json:"symbol"`
	URI    string `json:"uri"`
}
type Address struct {
	Address string `json:"address"`
	Name    string `json:"name"`
	Symbol  string `json:"symbol"`
	Index   int64  `json:"index"`
}
type ApiResponse struct {
	Data []PoolData `json:"data"`
}

type PoolData struct {
	ID         string     `json:"id"`
	Type       string     `json:"type"`
	Attributes Attributes `json:"attributes"`
}

type Attributes struct {
	BaseTokenPriceUSD     string           `json:"base_token_price_usd"`
	QuoteTokenPriceUSD    string           `json:"quote_token_price_usd"`
	Address               string           `json:"address"`
	Name                  string           `json:"name"`
	PoolCreatedAt         time.Time        `json:"pool_created_at"`
	TokenPriceUSD         string           `json:"token_price_usd"`
	FDVUSD                string           `json:"fdv_usd"`
	PriceChangePercentage ChangePercentage `json:"price_change_percentage"`
	Transactions          Transactions     `json:"transactions"`
	VolumeUSD             VolumeUSD        `json:"volume_usd"`
	ReserveInUSD          string           `json:"reserve_in_usd"`
}

type ChangePercentage struct {
	M5  string `json:"m5"`
	H1  string `json:"h1"`
	H6  string `json:"h6"`
	H24 string `json:"h24"`
}
type Holder struct {
	Address string
	Amount  float64
}
type Transactions struct {
	M5  TransactionDetails `json:"m5"`
	M15 TransactionDetails `json:"m15"`
	M30 TransactionDetails `json:"m30"`
	H1  TransactionDetails `json:"h1"`
	H24 TransactionDetails `json:"h24"`
}

type TransactionDetails struct {
	Buys    int `json:"buys"`
	Sells   int `json:"sells"`
	Buyers  int `json:"buyers"`
	Sellers int `json:"sellers"`
}

type VolumeUSD struct {
	M5  string `json:"m5"`
	H1  string `json:"h1"`
	H6  string `json:"h6"`
	H24 string `json:"h24"`
}
type PriceBin struct {
	BinIndex    int
	StartCandle int // earliest candle index that hit this bin
	EndCandle   int // latest candle index that hit this bin
	AccumVolume float64
}

var tokens []Token

func (nt *NullTime) UnmarshalJSON(b []byte) error {
	// Remove quotes
	s := strings.Trim(string(b), "\"")
	if s == "" {
		// Assign zero time if empty
		nt.Time = time.Time{}
		return nil
	}
	// Parse using RFC3339 format (adjust layout if needed)
	t, err := time.Parse(time.RFC3339, s)
	if err != nil {
		return err
	}
	nt.Time = t
	return nil
}
func loadTokens(filename string) []Token {
	file, err := os.Open(filename)
	if err != nil {
		log.Println("No token file found, starting fresh.")
		return []Token{}
	}
	defer file.Close()
	data, err := ioutil.ReadAll(file)
	if err != nil {
		log.Println("Error reading token file:", err)
		return []Token{}
	}
	var tokenList []Token
	err = json.Unmarshal(data, &tokenList)
	if err != nil {
		log.Println("Error unmarshalling token data:", err)
		return []Token{}
	}
	return tokenList
}

func saveTokens(filename string, tokens []Token) error {
	data, err := json.MarshalIndent(tokens, "", "  ")
	if err != nil {
		return err
	}
	return ioutil.WriteFile(filename, data, 0644)
}
func saveTokensSenti(filename string, tokens Address) error {
	var addresses []Address
	//reader := bufio.NewReader(os.Stdin)

	// Define the file path
	outputPath := filename

	// Check if the file exists
	if _, err := os.Stat(outputPath); err == nil {
		// Read existing data
		fileData, err := ioutil.ReadFile(outputPath)
		if err != nil {
			fmt.Println("Error reading existing file:", err)

		}
		if err := json.Unmarshal(fileData, &addresses); err != nil {
			fmt.Println("Error parsing existing JSON:", err)

		}
	}
	addresses = append(addresses, tokens)
	data, err := json.MarshalIndent(addresses, "", "  ")
	if err != nil {
		return err
	}
	return ioutil.WriteFile(filename, data, 0644)
}

// ------------------ OHLCV Data Structures ------------------

// OHLCVEntry holds a single candlestick’s data.
type OHLCVEntry struct {
	Timestamp int64
	Open      float64
	High      float64
	Low       float64
	Close     float64
	Volume    float64
}

// OhlcvResponse reflects the JSON structure from GeckoTerminal.
type OhlcvResponse struct {
	Data struct {
		ID         string `json:"id"`
		Type       string `json:"type"`
		Attributes struct {
			OhlcvList [][]float64 `json:"ohlcv_list"`
		} `json:"attributes"`
	} `json:"data"`
	Meta struct {
		Base struct {
			Address         string      `json:"address"`
			Name            string      `json:"name"`
			Symbol          string      `json:"symbol"`
			CoingeckoCoinID interface{} `json:"coingecko_coin_id"`
		} `json:"base"`
		Quote struct {
			Address         string `json:"address"`
			Name            string `json:"name"`
			Symbol          string `json:"symbol"`
			CoingeckoCoinID string `json:"coingecko_coin_id"`
		} `json:"quote"`
	} `json:"meta"`
}

// fetchOHLCVData gets the OHLCV data from GeckoTerminal.
func fetchOHLCVData() ([]OHLCVEntry, error) {
	url := fmt.Sprintf("https://api.geckoterminal.com/api/v2/networks/solana/pools/%s/ohlcv/minute?aggregate=1&limit=1000¤cy=USD", currentPoolID)

	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var ohlcvResp OhlcvResponse
	err = json.Unmarshal(body, &ohlcvResp)
	if err != nil {
		return nil, err
	}
	var entries []OHLCVEntry
	for _, record := range ohlcvResp.Data.Attributes.OhlcvList {
		if len(record) < 6 {
			continue // skip incomplete records
		}
		entry := OHLCVEntry{
			Timestamp: int64(record[0]),
			Open:      record[1],
			High:      record[2],
			Low:       record[3],
			Close:     record[4],
			Volume:    record[5],
		}
		entries = append(entries, entry)
	}
	// Reverse the entries so the oldest is first.
	for i, j := 0, len(entries)-1; i < j; i, j = i+1, j-1 {
		entries[i], entries[j] = entries[j], entries[i]
	}
	return entries, nil
}

// ------------------ Fyne Widgets ------------------

// simpleRenderer is a basic implementation of fyne.WidgetRenderer.
type simpleRenderer struct {
	objects []fyne.CanvasObject
}

func (r *simpleRenderer) Layout(size fyne.Size) {
	for _, obj := range r.objects {
		obj.Resize(size)
	}
}

func (r *simpleRenderer) MinSize() fyne.Size {
	var minSize fyne.Size
	for _, obj := range r.objects {
		minSize = minSize.Max(obj.MinSize())
	}
	return minSize
}

func (r *simpleRenderer) Refresh() {
	for _, obj := range r.objects {
		canvas.Refresh(obj)
	}
}

func (r *simpleRenderer) BackgroundColor() color.Color {
	return color.Transparent
}

func (r *simpleRenderer) Objects() []fyne.CanvasObject {
	return r.objects
}

func (r *simpleRenderer) Destroy() {}

// chartRenderer is our custom renderer for the InteractiveOHLCVChart widget.
// It overlays a canvas.Raster (for drawing the chart and grid) with price and time axis labels.
type chartRenderer struct {
	chart            *InteractiveOHLCVChart
	raster           *canvas.Raster
	yLabels          []*canvas.Text
	xLabels          []*canvas.Text
	objects          []fyne.CanvasObject
	xTickTimes       []time.Time
	heatmapTexts     []*canvas.Text
	heatmapPositions []fyne.Position
}

func (r *chartRenderer) Layout(size fyne.Size) {
	r.raster.Resize(size)
	chartH := int(0.7 * float64(size.Height))
	numYGrid := len(r.yLabels) - 1
	for i, label := range r.yLabels {
		y := int(float64(chartH) * float64(i) / float64(numYGrid))
		label.Move(fyne.NewPos(2, float32(y)-label.MinSize().Height/2))
	}
	numXGrid := len(r.xLabels) - 1
	for i, label := range r.xLabels {
		x := int(float64(size.Width) * float64(i) / float64(numXGrid))
		label.Move(fyne.NewPos(float32(x)-label.MinSize().Width/2, float32(size.Height)-label.MinSize().Height-2))
	}
}

func (r *chartRenderer) MinSize() fyne.Size {
	return r.raster.MinSize()
}

// getBinIndex maps a price to a bin index in [0..numBins-1].
func getBinIndex(price, minPrice, maxPrice float64, numBins int) int {
	if price < minPrice {
		price = minPrice
	}
	if price > maxPrice {
		price = maxPrice
	}
	ratio := (price - minPrice) / (maxPrice - minPrice)
	idx := int(ratio * float64(numBins))
	if idx < 0 {
		idx = 0
	}
	if idx >= numBins {
		idx = numBins - 1
	}
	return idx
}

// computeVolumeProfileBins aggregates the total volume at each price bin.
func (c *InteractiveOHLCVChart) computeVolumeProfileBins(numBins int) []PriceBin {
	bins := make([]PriceBin, numBins)
	for i := range bins {
		bins[i] = PriceBin{
			BinIndex:    i,
			StartCandle: -1, // indicates unused
			EndCandle:   -1,
		}
	}
	if len(c.data) == 0 {
		return bins
	}

	// 1) Find overall minPrice and maxPrice
	minPrice := math.MaxFloat64
	maxPrice := -math.MaxFloat64
	for _, candle := range c.data {
		if candle.Low < minPrice {
			minPrice = candle.Low
		}
		if candle.High > maxPrice {
			maxPrice = candle.High
		}
	}
	if minPrice == maxPrice {
		// avoid zero range
		maxPrice = minPrice + 1.0
	}

	// 2) Accumulate each candle’s volume in the bins it spans
	for i, candle := range c.data {
		cndlMin := math.Min(candle.Open, candle.Close)
		cndlMax := math.Max(candle.Open, candle.Close)
		// Optionally consider entire wick range:
		if candle.Low < cndlMin {
			cndlMin = candle.Low
		}
		if candle.High > cndlMax {
			cndlMax = candle.High
		}

		startBin := getBinIndex(cndlMin, minPrice, maxPrice, numBins)
		endBin := getBinIndex(cndlMax, minPrice, maxPrice, numBins)

		// Add the candle’s volume to each bin from startBin..endBin
		// (this is a rough approximation; a more advanced approach would
		// distribute volume proportionally within that price range).
		for b := startBin; b <= endBin; b++ {
			if bins[b].StartCandle == -1 {
				bins[b].StartCandle = i
			}
			bins[b].EndCandle = i
			bins[b].AccumVolume += candle.Volume
		}
	}

	return bins
}

func (r *chartRenderer) Refresh() {
	size := r.raster.Size()
	w, h := size.Width, size.Height
	chartH := int(0.7 * float64(h))
	if len(r.chart.data) == 0 {
		return
	}

	n := len(r.chart.data)
	baseCandleWidth := float64(w) / float64(n)
	scaledCandleWidth := baseCandleWidth * r.chart.scale

	// Filter only the visible candlesticks based on current offset and scale.
	var visibleData []OHLCVEntry
	var visibleIndices []int
	for i, d := range r.chart.data {
		xStart := float64(i)*scaledCandleWidth + r.chart.offsetX
		xEnd := float64(i+1)*scaledCandleWidth + r.chart.offsetX
		if xEnd >= 0 && xStart <= float64(w) {
			visibleData = append(visibleData, d)
			visibleIndices = append(visibleIndices, i)
		}
	}

	// If there is no visible data, do nothing.
	if len(visibleData) == 0 {
		return
	}

	// Recalculate the visible price range.
	minPrice := visibleData[0].Low
	maxPrice := visibleData[0].High
	for _, d := range visibleData {
		if d.Low < minPrice {
			minPrice = d.Low
		}
		if d.High > maxPrice {
			maxPrice = d.High
		}
	}
	priceRange := maxPrice - minPrice
	minRange := 0.00001 // Adjust threshold based on asset's scale.
	if priceRange < minRange {
		midPrice := (minPrice + maxPrice) / 2.0
		minPrice = midPrice - minRange/2.0
		maxPrice = midPrice + minRange/2.0
		priceRange = minRange
	}

	// Update Y-axis labels based on the visible price range.
	numYGrid := len(r.yLabels) - 1
	for i, label := range r.yLabels {
		// Compute the price corresponding to this grid line.
		priceValue := maxPrice - (float64(i)/float64(numYGrid))*priceRange
		label.Text = fmt.Sprintf("%.6f", priceValue)

		// Compute the base y position along the chart area.
		baseY := float64(chartH) * (float64(i) / float64(numYGrid))
		// Apply vertical zoom and pan adjustments:
		yPos := int(baseY*r.chart.scaleY + r.chart.offsetY)
		label.Move(fyne.NewPos(2, float32(yPos)-label.MinSize().Height/2))
		label.Refresh()
	}

	// --- X-axis: Update label positions only, using fixed tick times ---
	// If the fixed tick times haven't been computed yet, do so.
	if r.xTickTimes == nil || len(r.xTickTimes) == 0 {
		startTime := time.Unix(r.chart.data[0].Timestamp, 0).UTC() //startTime := time.Unix(r.chart.data[0].Timestamp, 0)
		endTime := time.Unix(r.chart.data[len(r.chart.data)-1].Timestamp, 0)
		totalDuration := endTime.Sub(startTime)
		numXGrid := len(r.xLabels) - 1

		r.xTickTimes = make([]time.Time, numXGrid+1)
		for i := 0; i <= numXGrid; i++ {
			ratio := float64(i) / float64(numXGrid)
			r.xTickTimes[i] = startTime.Add(time.Duration(ratio * float64(totalDuration)))
			// Set fixed text (only once).
			r.xLabels[i].Text = r.xTickTimes[i].Format("15:04")
		}
	}

	// Compute the total data width (in pixels) for the full data range.
	totalDataWidth := float64(len(r.chart.data)) * scaledCandleWidth
	// Compute full time range (for mapping tick times to x positions).
	fullStartTime := time.Unix(r.chart.data[0].Timestamp, 0)
	fullEndTime := time.Unix(r.chart.data[len(r.chart.data)-1].Timestamp, 0)
	totalDuration := fullEndTime.Sub(fullStartTime)

	// Update x-axis label positions based on fixed tick times and current pan/zoom.
	for i, label := range r.xLabels {
		tickTime := r.xTickTimes[i]
		// Compute the ratio of this tick time within the full time range.
		ratio := float64(tickTime.Sub(fullStartTime)) / float64(totalDuration)
		// Map to a data-space x position and apply horizontal offset.
		xPos := ratio*totalDataWidth + r.chart.offsetX
		label.Move(fyne.NewPos(float32(xPos)-label.MinSize().Width/2, float32(h)-label.MinSize().Height-2))
		label.Refresh()
	}

	r.raster.Refresh()
}

func (r *chartRenderer) BackgroundColor() color.Color {
	return color.Transparent
}

func (r *chartRenderer) Objects() []fyne.CanvasObject {
	return r.objects
}

func (r *chartRenderer) Destroy() {}

// InteractiveOHLCVChart is a custom widget that draws an interactive candlestick chart with volume plot.

type InteractiveOHLCVChart struct {
	widget.BaseWidget
	data        []OHLCVEntry
	transfers   []Transfer
	offsetX     float64 // horizontal pan offset
	scale       float64 // horizontal zoom scale factor
	offsetY     float64 // vertical pan offset
	scaleY      float64 // vertical zoom scale factor
	prevDragPos fyne.Position
	dragging    bool
}

func NewInteractiveOHLCVChart(data []OHLCVEntry) *InteractiveOHLCVChart {
	c := &InteractiveOHLCVChart{
		data:    data,
		offsetX: 0,
		scale:   1.0,
		offsetY: 0,
		scaleY:  1.0,
	}
	c.ExtendBaseWidget(c)
	return c
}
func volumeToColor(ratio float64) color.RGBA {
	// ratio in [0..1], pick your gradient
	r := uint8(255 * ratio)
	g := uint8(0)
	b := uint8(200 - 200*ratio)
	a := uint8(180)
	return color.RGBA{R: r, G: g, B: b, A: a}
}
func (c *InteractiveOHLCVChart) CreateRenderer() fyne.WidgetRenderer {
	// Define number of grid lines for each axis.
	numYGrid := 5
	numXGrid := 5

	// Create label objects for the price (y) and time (x) axes.
	yLabels := make([]*canvas.Text, numYGrid+1)
	for i := 0; i <= numYGrid; i++ {
		lbl := canvas.NewText("", color.White)
		lbl.TextSize = 10
		yLabels[i] = lbl
	}
	xLabels := make([]*canvas.Text, numXGrid+1)
	for i := 0; i <= numXGrid; i++ {
		lbl := canvas.NewText("", color.White)
		lbl.TextSize = 10
		xLabels[i] = lbl
	}

	// Create a raster that draws the chart (candlesticks, volume bars) along with grid lines.
	// Create a raster that draws the chart (candlesticks, volume bars) along with grid lines.
	raster := canvas.NewRaster(func(w, h int) image.Image {
		img := image.NewRGBA(image.Rect(0, 0, w, h))
		// Fill background.
		bgColor := darkBlueTheme{}.Color(theme.ColorNameBackground, theme.VariantDark)
		for x := 0; x < w; x++ {
			for y := 0; y < h; y++ {
				img.Set(x, y, bgColor)
			}
		}
		// Divide drawing area into candlestick chart (top 70%) and volume plot (bottom 30%).
		chartH := int(0.7 * float64(h))
		volumeH := h - chartH

		// Ensure data exists.
		if len(c.data) == 0 {
			return img
		}

		// Determine overall price range.
		minPrice := c.data[0].Low
		maxPrice := c.data[0].High
		for _, d := range c.data {
			if d.Low < minPrice {
				minPrice = d.Low
			}
			if d.High > maxPrice {
				maxPrice = d.High
			}
		}
		priceRange := maxPrice - minPrice
		if priceRange == 0 {
			priceRange = 1
		}

		// Pre-calculate candle width with horizontal zoom & pan.
		n := len(c.data)
		baseCandleWidth := float64(w) / float64(n)
		scaledCandleWidth := baseCandleWidth * c.scale

		// Helper: map a price to a Y coordinate in the chart area.
		scalePrice := func(price float64) int {
			normalized := (price - minPrice) / priceRange
			y := float64(chartH) * (1.0 - normalized)
			y = y*c.scaleY + c.offsetY
			return int(y)
		}

		// Draw grid lines.
		gridColor := color.RGBA{R: 64, G: 64, B: 64, A: 255}
		// Horizontal grid.
		for i := 0; i <= numYGrid; i++ {
			y := int(float64(chartH) * float64(i) / float64(numYGrid))
			for x := 0; x < w; x++ {
				img.Set(x, y, gridColor)
			}
		}
		// Vertical grid.
		for i := 0; i <= numXGrid; i++ {
			x := int(float64(w) * float64(i) / float64(numXGrid))
			for y := 0; y < h; y++ {
				img.Set(x, y, gridColor)
			}
		}

		// Compute maxVolume (for normalizing heatmap intensity).
		// *** Draw extended heatmap for each bullish candle until the next bullish candle with a higher close. ***

		// 1) Find the maximum volume so we can scale alpha.
		maxVolume := 0.0
		for _, d := range c.data {
			if d.Volume > maxVolume {
				maxVolume = d.Volume
			}
		}
		if maxVolume == 0 {
			maxVolume = 1.0
		}

		// 2) Iterate over each candle i.
		for i := 0; i < len(c.data); i++ {
			candleI := c.data[i]

			// Only consider bullish (green) candles.
			if candleI.Close < candleI.Open {
				continue
			}

			// 3) Look for the next bullish candle j whose close is strictly higher.
			j := i + 1
			for j < len(c.data) {
				candleJ := c.data[j]
				// Must be bullish and must have a higher close value:
				if candleJ.Close >= candleJ.Open && candleJ.Close > candleI.Close {
					break
				}
				j++
			}

			// 4) The heatmap extends from the left edge of candle i to the left edge of candle j.
			x1 := float64(i)*scaledCandleWidth + c.offsetX
			var x2 float64
			if j < len(c.data) {
				// Found a candle j that meets the condition.
				x2 = float64(j)*scaledCandleWidth + c.offsetX
			} else {
				// No such candle found. Extend to the end of all data.
				x2 = float64(len(c.data))*scaledCandleWidth + c.offsetX
			}

			// 5) Vertical position: a small band (±5 px) around candle i’s close.
			yClose := scalePrice(candleI.Close)
			rectTop := yClose - 5
			rectBottom := yClose + 5
			/*
				// 6) Volume‐based alpha scaling.
				volRatio := candleI.Volume / maxVolume
				alpha := uint8(math.Min(volRatio*255.0, 180.0))
				heatColor := color.RGBA{R: 255, G: 0, B: 200, A: alpha} // e.g. pink/purple overlay

				// 7) Fill the rectangle [x1..x2] × [rectTop..rectBottom].
				for xx := int(x1); xx < int(x2); xx++ {
					if xx < 0 || xx >= w {
						continue
					}
					for yy := rectTop; yy <= rectBottom; yy++ {
						if yy < 0 || yy >= chartH {
							continue
						}
						img.Set(xx, yy, heatColor)
					}
				}*/
			volRatio := candleI.Volume / maxVolume
			alpha := uint8(math.Min(volRatio*255.0, 180.0))

			// Instead of a single pink/purple overlay, use your threshold logic:
			var heatColor color.RGBA
			switch {
			case candleI.Volume > 100_000_000:
				// >100M => red
				heatColor = color.RGBA{R: 255, G: 0, B: 0, A: alpha}
			case candleI.Volume > 10_000_000:
				// >10M => orange
				heatColor = color.RGBA{R: 255, G: 165, B: 0, A: alpha}
			default:
				// <10M => yellow
				heatColor = color.RGBA{R: 255, G: 255, B: 0, A: alpha}
			}

			// 7) Fill the rectangle [x1..x2] × [rectTop..rectBottom].
			for xx := int(x1); xx < int(x2); xx++ {
				if xx < 0 || xx >= w {
					continue
				}
				for yy := rectTop; yy <= rectBottom; yy++ {
					if yy < 0 || yy >= chartH {
						continue
					}
					img.Set(xx, yy, heatColor)
				}
			}
		}

		// Draw candlesticks and volume bars.
		for i, d := range c.data {
			xStart := int(float64(i)*scaledCandleWidth + c.offsetX)
			xEnd := int(float64(i+1)*scaledCandleWidth + c.offsetX)
			xCenter := (xStart + xEnd) / 2
			if xEnd < 0 || xStart > w {
				continue
			}

			openY := scalePrice(d.Open)
			closeY := scalePrice(d.Close)
			highY := scalePrice(d.High)
			lowY := scalePrice(d.Low)

			// Draw the wick.
			wickColor := color.White
			for y := highY; y <= lowY; y++ {
				if xCenter >= 0 && xCenter < w && y >= 0 && y < chartH {
					img.Set(xCenter, y, wickColor)
				}
			}

			// Determine the candle body color.
			var bodyColor color.Color
			if d.Close >= d.Open {
				bodyColor = color.RGBA{0, 200, 0, 255} // Green for bullish
			} else {
				bodyColor = color.RGBA{200, 0, 0, 255} // Red for bearish
			}

			rawBodyHeight := math.Abs(float64(closeY - openY))
			minBodyHeight := 2.0 // Minimum body height in pixels

			var top, bottom int
			if rawBodyHeight < minBodyHeight {
				if d.Close >= d.Open {
					top = openY - int(minBodyHeight)
					bottom = openY
				} else {
					top = openY
					bottom = openY + int(minBodyHeight)
				}
			} else {
				if d.Close >= d.Open {
					top = closeY
					bottom = openY
				} else {
					top = openY
					bottom = closeY
				}
			}
			for x := xStart; x < xEnd; x++ {
				for y := top; y <= bottom; y++ {
					if x >= 0 && x < w && y >= 0 && y < chartH {
						img.Set(x, y, bodyColor)
					}
				}
			}

			// Draw volume bar in the bottom 30%.
			volBarHeight := int((d.Volume / maxVolume) * float64(volumeH))
			volXStart := xStart
			volXEnd := xEnd
			volYStart := chartH + (volumeH - volBarHeight)
			for x := volXStart; x < volXEnd; x++ {
				for y := volYStart; y < chartH+volumeH; y++ {
					img.Set(x, y, color.RGBA{0x80, 0xa0, 0xc0, 0x90})
				}
			}
		}

		return img
	})

	objects := []fyne.CanvasObject{raster}
	// Add the axis labels to the renderer objects.
	for _, lbl := range yLabels {
		objects = append(objects, lbl)
	}
	for _, lbl := range xLabels {
		objects = append(objects, lbl)
	}
	return &chartRenderer{
		chart:            c,
		raster:           raster,
		yLabels:          yLabels,
		xLabels:          xLabels,
		objects:          objects,
		heatmapTexts:     []*canvas.Text{},
		heatmapPositions: []fyne.Position{},
	}
}

// Implement Draggable and Scrollable interfaces for interactivity.

func (c *InteractiveOHLCVChart) Dragged(e *fyne.DragEvent) {
	if !c.dragging {
		c.prevDragPos = e.Position
		c.dragging = true
	}
	delta := e.Position.Subtract(c.prevDragPos)
	c.offsetX += float64(delta.X)
	c.offsetY += float64(delta.Y)
	c.prevDragPos = e.Position
	c.Refresh()
}

func (c *InteractiveOHLCVChart) DragEnd() {
	c.dragging = false
}

func (c *InteractiveOHLCVChart) Scrolled(e *fyne.ScrollEvent) {
	if e.Scrolled.DY > 0 {
		c.scale *= 1.1
		c.scaleY *= 1.1
	} else {
		c.scale /= 1.1
		c.scaleY /= 1.1
	}
	c.Refresh()
}

// ------------------ MiniChart Widget ------------------

type MiniChart struct {
	widget.BaseWidget
	title string
}

func NewMiniChart(title string) *MiniChart {
	m := &MiniChart{title: title}
	m.ExtendBaseWidget(m)
	return m
}

func (m *MiniChart) CreateRenderer() fyne.WidgetRenderer {
	txt := canvas.NewText(m.title, color.White)
	txt.Alignment = fyne.TextAlignCenter
	return &simpleRenderer{objects: []fyne.CanvasObject{txt}}
}

func (m *MiniChart) Tapped(ev *fyne.PointEvent) {
	expanded := NewMiniChart("Expanded: " + m.title)
	win := fyne.CurrentApp().NewWindow("Expanded Chart")
	win.SetContent(expanded)
	win.Resize(fyne.NewSize(800, 600))
	win.Show()
}

func (m *MiniChart) TappedSecondary(ev *fyne.PointEvent) {
	// No secondary action.
}

func getTokenMetadata(token string) *TokenMetadata {
	url := fmt.Sprintf("http://localhost:3300/api/token-metadata?mint=%s", token)
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println("Error fetching data:", err)
		return nil
	}
	defer resp.Body.Close()
	if resp.StatusCode == http.StatusOK {
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Println("Error reading response body:", err)
			return nil
		}
		var metadata TokenMetadata
		if err := json.Unmarshal(body, &metadata); err != nil {
			fmt.Println("Error unmarshaling JSON:", err)
			return nil
		}
		fmt.Printf("Name: %s\nSymbol: %s\nURI: %s\n", metadata.Name, metadata.Symbol, metadata.URI)
		return &metadata
	} else {
		fmt.Printf("Failed to fetch data. Status code: %d\n", resp.StatusCode)
		return nil
	}
}

func fetchPoolData(address string) (*ApiResponse, error) {
	url := fmt.Sprintf("https://api.geckoterminal.com/api/v2/networks/solana/tokens/%s/pools", address)
	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Get(url)
	if err != nil {
		return nil, fmt.Errorf("error making GET request: %v", err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("received non-200 response code: %d", resp.StatusCode)
	}
	var apiResponse ApiResponse
	if err := json.NewDecoder(resp.Body).Decode(&apiResponse); err != nil {
		return nil, fmt.Errorf("error decoding JSON response: %v", err)
	}
	return &apiResponse, nil
}
func startLivePriceUpdates(chart *InteractiveOHLCVChart) {
	ticker := time.NewTicker(1 * time.Minute)
	go func() {
		for range ticker.C {
			latestEntry, err := fetchLatestOHLCVEntry()
			if err != nil {
				log.Println("Error fetching live update:", err)
				continue
			}
			fmt.Println("Chart Data Lenght", len(chart.data))
			// Update current candle if still within the same minute, else append.
			if len(chart.data) > 0 {
				lastIdx := len(chart.data) - 1
				lastCandleTime := time.Unix(chart.data[lastIdx].Timestamp, 0)
				latestTime := time.Unix(latestEntry.Timestamp, 0)
				if lastCandleTime.Minute() == latestTime.Minute() {
					// Update the last candle.
					chart.data[lastIdx].Close = latestEntry.Close
					if latestEntry.High > chart.data[lastIdx].High {
						chart.data[lastIdx].High = latestEntry.High
					}
					if latestEntry.Low < chart.data[lastIdx].Low {
						chart.data[lastIdx].Low = latestEntry.Low
					}
					chart.data[lastIdx].Volume += latestEntry.Volume
				} else {
					// Append new candle.
					chart.data = append(chart.data, *latestEntry)
				}
			} else {
				chart.data = append(chart.data, *latestEntry)
			}
			// Optionally, trim the slice if it exceeds a maximum length.
			if len(chart.data) > 1000 {
				chart.data = chart.data[1:]
			}
			// Refresh the chart (this is safe since Fyne’s Refresh is thread-safe).
			fmt.Println("Loading from", currentPoolID)
			chart.Refresh()
		}
	}()
}

// fetchLatestOHLCVEntry gets only the latest candlestick entry.
func fetchLatestOHLCVEntry() (*OHLCVEntry, error) {
	url := fmt.Sprintf("https://api.geckoterminal.com/api/v2/networks/solana/pools/%s/ohlcv/minute?aggregate=1&limit=1¤cy=USD", currentPoolID)

	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var ohlcvResp OhlcvResponse
	if err := json.Unmarshal(body, &ohlcvResp); err != nil {
		return nil, err
	}
	if len(ohlcvResp.Data.Attributes.OhlcvList) == 0 {
		return nil, fmt.Errorf("no data")
	}
	record := ohlcvResp.Data.Attributes.OhlcvList[0]
	if len(record) < 6 {
		return nil, fmt.Errorf("incomplete data")
	}
	entry := &OHLCVEntry{
		Timestamp: int64(record[0]),
		Open:      record[1],
		High:      record[2],
		Low:       record[3],
		Close:     record[4],
		Volume:    record[5],
	}
	return entry, nil
}

// ------------------ Main UI ------------------

func main() {
	a := app.New()
	a.Settings().SetTheme(darkBlueTheme{})

	w := a.NewWindow("Meme Coin OHLCV Chart UI")
	w.Resize(fyne.NewSize(1200, 800))

	// Load tokens.
	tokens = loadTokens("tokens.json")

	// Fetch OHLCV data.
	ohlcvData, err := fetchOHLCVData()
	if err != nil {
		log.Println("Error fetching OHLCV data:", err)
		ohlcvData = []OHLCVEntry{}
	}
	tokenAddress := "JKGHEMWfSF5qnQud86RRRxTdvjja5jVa22M7Rtapump"

	// Create a new BitqueryClient.
	client := holders.NewBitqueryClient()

	// Fetch transfer data, update the JSON file, and get its content.
	output, err := client.UpdateAndGetTransfers(tokenAddress)
	if err != nil {
		log.Fatalf("Error updating and getting transfers: %v", err)
	}
	// Create the interactive chart.
	mainChart := NewInteractiveOHLCVChart(ohlcvData)
	startLivePriceUpdates(mainChart)

	var transfers []Transfer
	if err := json.Unmarshal([]byte(output), &transfers); err != nil {
		log.Fatalf("Error decoding transfers: %v", err)
	}
	mainChart.transfers = transfers

	// --- Create Control Buttons for Pan/Zoom ---
	resetViewButton := widget.NewButton("Reset View", func() {
		// Reset pan and zoom to default.
		mainChart.offsetX = 0
		mainChart.offsetY = 0
		mainChart.scale = 1.0
		mainChart.scaleY = 1.0
		mainChart.Refresh()
	})
	zoomInButton := widget.NewButton("Zoom(+)", func() {
		mainChart.scale *= 1.1
		mainChart.scaleY *= 1.1
		mainChart.Refresh()
	})
	zoomOutButton := widget.NewButton("Zoom(-)", func() {
		mainChart.scale /= 1.1
		mainChart.scaleY /= 1.1
		mainChart.Refresh()
	})
	chartControls := container.NewHBox(resetViewButton, zoomOutButton, zoomInButton)

	// Create mini charts.
	miniChart1 := NewMiniChart("Mini Chart 1")
	miniChart2 := NewMiniChart("Mini Chart 2")
	miniChart3 := NewMiniChart("Mini Chart 3")
	miniChartsContainer := container.NewHBox(miniChart1, miniChart2, miniChart3)

	// Left panel: include the control buttons above the main chart.
	leftPanel := container.NewBorder(chartControls, miniChartsContainer, nil, nil, mainChart)

	// Token management panel.
	var tokenList *widget.List
	tokenEntry := widget.NewEntry()
	tokenEntry.SetPlaceHolder("Enter token name")
	tokenIndex := widget.NewEntry()
	tokenIndex.SetPlaceHolder("Enter token Index")
	addTokenButton := widget.NewButton("Add Token", func() {
		if tokenEntry.Text != "" {
			metaData := getTokenMetadata(tokenEntry.Text)
			data, err := fetchPoolData(tokenEntry.Text)
			if err != nil {
				fmt.Printf("Error: %v\n", err)
				return
			}
			if len(data.Data) == 0 {
				return
			}
			info := len(data.Data)
			latestData := data.Data[info-1]
			indexToken, _ := strconv.ParseInt(tokenIndex.Text, 10, 64)
			newTokenIndex := Address{
				Name:    metaData.Name,
				Symbol:  metaData.Symbol,
				Address: tokenEntry.Text,
				Index:   indexToken,
			}
			newToken := Token{
				Name:        metaData.Name,
				Symbol:      metaData.Symbol,
				MintAddress: tokenEntry.Text,
				Address:     latestData.ID,
			}
			tokens = append(tokens, newToken)
			if err := saveTokens("tokens.json", tokens); err != nil {
				dialog.ShowError(err, w)
			}
			if err := saveTokensSenti("../addresses/address.json", newTokenIndex); err != nil {
				dialog.ShowError(err, w)
			}
			tokenList.Refresh()
			tokenEntry.SetText("")
		}
	})
	tokenList = widget.NewList(
		func() int { return len(tokens) },
		func() fyne.CanvasObject { return widget.NewLabel("template") },
		func(i widget.ListItemID, o fyne.CanvasObject) {
			o.(*widget.Label).SetText(tokens[i].Name)
		},
	)

	tokenInfoBinding := binding.NewString()
	tokenInfo := widget.NewLabelWithData(tokenInfoBinding)
	tokenInfo.Wrapping = fyne.TextWrapWord

	tokenList.OnSelected = func(id widget.ListItemID) {
		selected := tokens[id]

		go func() {
			for {

				output, err := client.UpdateAndGetTransfers(selected.MintAddress)
				if err != nil {
					log.Fatalf("Error updating and getting transfers: %v", err)
				}
				var transfers []Transfer
				if err := json.Unmarshal([]byte(output), &transfers); err != nil {
					log.Fatalf("Error decoding transfers: %v", err)
				}
				mainChart.transfers = transfers
				data, err := fetchPoolData(selected.MintAddress)
				if err != nil {
					fmt.Printf("Error: %v\n", err)
					return
				}
				info := len(data.Data)
				latestData := data.Data[info-1]
				fmt.Println("Price update", latestData.Attributes.TokenPriceUSD)

				updateText := fmt.Sprintf(
					"Name: %s\n\nSymbol: %s\n\nPool Address: %s\n\nMint Address: %s\n\nPrice: %s\n\nFDV (USD): %s\n\nPrice Change (5m): %s%% | (1h): %s%% | (6h): %s%% | (24h): %s%% |\n\nTransactions (1h): Buys: %d, Sells: %d, Buyers: %d, Sellers: %d\n\nTransactions (24h): Buys: %d, Sells: %d, Buyers: %d, Sellers: %d\n\nVolume (5m): %s\n\n",
					selected.Name,
					selected.Symbol,
					selected.Address,
					selected.MintAddress,
					latestData.Attributes.TokenPriceUSD,
					latestData.Attributes.FDVUSD,
					latestData.Attributes.PriceChangePercentage.M5,
					latestData.Attributes.PriceChangePercentage.H1,
					latestData.Attributes.PriceChangePercentage.H6,
					latestData.Attributes.PriceChangePercentage.H24,
					latestData.Attributes.Transactions.H1.Buys,
					latestData.Attributes.Transactions.H1.Sells,
					latestData.Attributes.Transactions.H1.Buyers,
					latestData.Attributes.Transactions.H1.Sellers,
					latestData.Attributes.Transactions.H24.Buys,
					latestData.Attributes.Transactions.H24.Sells,
					latestData.Attributes.Transactions.H24.Buyers,
					latestData.Attributes.Transactions.H24.Sellers,
					latestData.Attributes.VolumeUSD.M5,
				)
				// Update the binding with the new text.
				tokenInfoBinding.Set(updateText)
				time.Sleep(1 * time.Minute)
			}
		}()

		// NEW: Load new OHLCV data for the clicked token.
		currentPoolID = strings.TrimPrefix(selected.Address, "solana_")
		newOHLCVData, err := fetchOHLCVData()
		if err != nil {
			log.Printf("Error fetching OHLCV data for token %s: %v", selected.Name, err)
		} else {
			mainChart.data = newOHLCVData
			mainChart.Refresh()
		}
	}
	tokenListContainer := container.NewStack(tokenList)
	tokenListContainer.Resize(fyne.NewSize(300, 700))
	rightPanel := container.NewVBox(
		widget.NewLabel("Add Token"),
		tokenEntry,
		tokenIndex,
		addTokenButton,
		widget.NewSeparator(),
		widget.NewLabel("Tokens"),
		tokenListContainer,
		widget.NewSeparator(),
		widget.NewLabel("Token Information"),
		tokenInfo,
	)

	// Main layout: charts on left, token management on right.
	content := container.NewHSplit(leftPanel, rightPanel)
	content.SetOffset(0.75)

	w.SetContent(content)
	w.ShowAndRun()
}
